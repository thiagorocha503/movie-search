// Mocks generated by Mockito 5.4.2 from annotations
// in movie_search_app/test/bloc/movie_overview_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;

import 'package:movie_search_app/data/movie_api.dart' as _i2;
import 'package:movie_search_app/language/model/language.dart' as _i8;
import 'package:movie_search_app/movie_details/model/movie.dart' as _i4;
import 'package:movie_search_app/movie_overview/model/movie_list.dart' as _i7;
import 'package:movie_search_app/movie_overview/model/result_search.dart'
    as _i3;
import 'package:movie_search_app/repository/movie_repository.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIMovieApi_0 extends _i1.SmartFake implements _i2.IMovieApi {
  _FakeIMovieApi_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResultSearch_1 extends _i1.SmartFake implements _i3.ResultSearch {
  _FakeResultSearch_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovie_2 extends _i1.SmartFake implements _i4.Movie {
  _FakeMovie_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i5.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IMovieApi get api => (super.noSuchMethod(
        Invocation.getter(#api),
        returnValue: _FakeIMovieApi_0(
          this,
          Invocation.getter(#api),
        ),
      ) as _i2.IMovieApi);
  @override
  _i6.Future<_i3.ResultSearch> getMovies({
    _i7.MovieList? list = _i7.MovieList.popular,
    required int? page,
    required _i8.Language? lang,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovies,
          [],
          {
            #list: list,
            #page: page,
            #lang: lang,
          },
        ),
        returnValue: _i6.Future<_i3.ResultSearch>.value(_FakeResultSearch_1(
          this,
          Invocation.method(
            #getMovies,
            [],
            {
              #list: list,
              #page: page,
              #lang: lang,
            },
          ),
        )),
      ) as _i6.Future<_i3.ResultSearch>);
  @override
  _i6.Future<_i4.Movie> getMovieByID({
    required int? id,
    required _i8.Language? lang,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieByID,
          [],
          {
            #id: id,
            #lang: lang,
          },
        ),
        returnValue: _i6.Future<_i4.Movie>.value(_FakeMovie_2(
          this,
          Invocation.method(
            #getMovieByID,
            [],
            {
              #id: id,
              #lang: lang,
            },
          ),
        )),
      ) as _i6.Future<_i4.Movie>);
}
